<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global game controller

sine_reset();
sine_set_speed(1.25);
message_scr_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Global keys.
/***************************************************
  CTRL + SHIFT + R = Restart game.
  CTRL + R = Restart room.
  F11 = Toggle fullscreen.
  f2 = previous room.
  f3 = next room.
***************************************************/

if (key_pressed(vk_anykey))
{
    var confirm;
    if (key_down(vk_control))
    {
        if (key_pressed(ord("R")))
        {
            if (key_down(vk_shift))
            {
                confirm = show_question("Are you sure you wish to restart the game?");
                if (confirm)
                    game_restart();
            }
            else
            {
                confirm = show_question("Are you sure you wish to restart the room?");
                if (confirm)
                    room_restart();
            }
        }
    }
    if (key_pressed(vk_escape))
    {
        confirm = show_question("Are you sure you wish to end the game?");
        if (confirm)
            game_end();
    }
    if (key_pressed(vk_f11))
    {
            window_set_fullscreen(!window_get_fullscreen());
    }
    if (key_pressed(vk_f6))
    {
        instance_create(x,y,obj_window);
    }
    if (key_pressed(vk_f7))
    {
        message_push("this is a test");
    }
    if (key_pressed(vk_f2))
    {
        if room_exists(room - 1)
        {
            //Reloading rm_preloader will reload datasets which causes memory leak issues.
            if ((room - 1) == rm_preloader)
                show_message("Cannot rerun preloader. Instead, please restart game via ctrl + shift + R");
            else
                room_goto_previous();
        }
    }
    if (key_pressed(vk_f3))
    {
        if room_exists(room + 1)
            room_goto_next();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sine_update();
sine_update();
message_scr_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resize camera
//camera_resize(global.resol_w, global.resol_h, global.resol_zoom, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unload game when finished
scr_unloader();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hud Info
draw_set_font(fnt_main);

var hud_string, char_x, char_y;
//hud_string = "Speed: " + string(fps) + " / " + string(room_speed) + " (" + string((fps / room_speed) * 100) + "%)";
char_x = -1;
char_y = -1;

if instance_exists(obj_char)
{
    char_x = obj_char.x;
    char_y = obj_char.y;
}

hud_string = string_format2("Speed: %a01 / %a02 ( %a03)#X / Y: %a04 / %a05", fps, room_speed, (fps / room_speed) * 100, char_x, char_y);

draw_set_color(c_black);
draw_text(7, 15, hud_string);
draw_set_color(c_white);
draw_text(8, 16, hud_string);

message_scr_draw();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
