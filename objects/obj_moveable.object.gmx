<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wallwiggle_enabled = true;
wallwiggle_object = obj_wall;
wallwiggle_check = global.cell_size / 2;
wallwiggle_speed = 1;

move_x = 0;
move_y = 0;
axis_x = 0;
axis_y = 0;

snapmove_x = 0;
snapmove_y = 0;
snapmove_x_dest = 0;
snapmove_y_dest = 0;
snapmoving = false;
snapmove_speed = 2;
snapmove_cell = global.cell_size;
prev_x = 0;
prev_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if ((snapmove_x != 0) or (snapmove_x_dest != 0))
{
    if (snapmove_x_dest == 0)
    {
        snapmove_x_dest = ((x div snapmove_cell) * snapmove_cell) + (snapmove_cell * snapmove_x);
    }
    if (x &lt; snapmove_x_dest)
        move_x += 1;
    if (x == snapmove_x_dest)
    {
        snapmove_x_dest = 0;
        snapmove_x = 0;
    }
}

if ((snapmove_y != 0) or (snapmove_y_dest != 0))
{
    if (snapmove_y_dest == 0)
    {
        snapmove_y_dest = ((y div snapmove_cell) * snapmove_cell) + (snapmove_cell * snapmove_y);
    }
    y = approach(y, snapmove_y_dest, 1);
    if (y == snapmove_y_dest)
    {
        snapmove_y_dest = 0;
        snapmove_y = 0;
    }
}*/

if (wallwiggle_enabled)
{
    var do_x, do_y, sign_x, sign_y, loop;
    do_x = axis_x;
    do_y = axis_y;
    sign_x = sign(do_x);
    sign_y = sign(do_y);

    if (do_x != 0)
    {
        if (place_meeting(x + sign_x, y, wallwiggle_object))
        {
            loop = true;
            for (iy = -wallwiggle_check; (iy &lt; wallwiggle_check) &amp;&amp; loop; iy += 1)
            {
                if (!place_meeting(x + do_x, y + iy, wallwiggle_object))
                {
                    move_y += sign(iy) * wallwiggle_speed;
                    loop = false;
                }
            }
        }
    }
    if (do_y != 0)
    {
        if (place_meeting(x, y + sign_y, wallwiggle_object))
        {
            loop = true;
            for (ix = -wallwiggle_check; (ix &lt; wallwiggle_check) &amp;&amp; loop; ix += 1)
            {
                if (!place_meeting(x + ix, y + do_y, wallwiggle_object))
                {
                    move_x += sign(ix) * wallwiggle_speed;
                    loop = false;
                }
            }
        }
    }
}

var obj, max_dist, is_solid;

obj = obj_wall;
max_dist = 1;
is_solid = true;

if (move_y != 0)
{
    if (place_meeting(x, y + move_y, obj))
    {
        if (move_y &lt; 0)
        {
            move_contact_(A_UP, max_dist, is_solid);
            move_y = 0;
        }
        else if (move_y &gt; 0)
        {
            move_contact_(A_DOWN, max_dist, is_solid);
            move_y = 0;
        }
    }
}
if (move_x != 0)
{
    if (place_meeting(x + move_x, y, obj))
    {
        if (move_x &lt; 0)
        {
            move_contact_(A_LEFT, max_dist, is_solid);
            move_x = 0;
        }
        else if (move_x &gt; 0)
        {
            move_contact_(A_RIGHT, max_dist, is_solid);
            move_x = 0;
        }
    }
}

x += move_x;
y += move_y;

x = clamp(x, 0, room_width);
y = clamp(y, 0, room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
